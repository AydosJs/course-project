// schema.prisma

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
    directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
    id           Int      @id @default(autoincrement())
    name         String
    email        String   @unique
    password     String
    registeredAt DateTime @default(now())
    updatedAt    DateTime @updatedAt
    isAdmin      Boolean  @default(false)

    collection Collection[]
}

model Collection {
    id          Int    @id @default(autoincrement())
    name        String
    topic       String
    description String
    ownerId     Int

    cover        String
    customFields Json

    // One Collection can have many Comments (can be empty)
    comments Comment[]

    // One Collection can have many Items (can be empty)
    items Item[]
    User  User?  @relation(fields: [ownerId], references: [id])
}

model Comment {
    id     Int      @id @default(autoincrement())
    userId Int
    date   DateTime
    text   String

    likes     Like[]
    likeCount Int

    Collection   Collection? @relation(fields: [collectionId], references: [id])
    collectionId Int?
    Item         Item?       @relation(fields: [itemId], references: [id])
    itemId       Int?
}

model Like {
    id        Int      @id @default(autoincrement())
    likedAt   DateTime
    userId    Int
    Comment   Comment  @relation(fields: [commentId], references: [id])
    commentId Int
    Item      Item     @relation(fields: [itemId], references: [id])
    itemId    Int
}

model Item {
    id          Int      @id @default(autoincrement())
    name        String
    description String
    cover       String
    likes       Like[]
    likeCount   Int
    tags        String[]

    // One Item can have many Comments (can be empty)
    comments Comment[]

    collectionId Int
    Collection   Collection @relation(fields: [collectionId], references: [id])
}

// ----------------------------------------------------------------
// model User {
//     id           Int      @id @default(autoincrement())
//     name         String
//     email        String   @unique
//     registeredAt DateTime @default(now())
//     updatedAt    DateTime @updatedAt
//     isAdmin      Boolean  @default(false)

//     collections Collection[]
// }

// model Collection {
//     id          Int    @id @default(autoincrement())
//     name        String
//     topic       String
//     description String
//     ownerId     Int
//     cover       String

//     user User @relation(fields: [ownerId], references: [id])

//     customFields Json

//     comments Comment[]

//     items Item[]
// }

// model Comment {
//     id        Int      @id @default(autoincrement())
//     userId    Int
//     date      DateTime
//     text      String
//     likeCount Int

//     user User @relation(fields: [userId], references: [id])

//     likes Like[]
//     item  Item?  @relation(fields: [itemId], references: [id])
// }

// model Like {
//     id      Int      @id @default(autoincrement())
//     likedAt DateTime
// }

// model Item {
//     id           Int      @id @default(autoincrement())
//     name         String
//     description  String
//     cover        String
//     likeCount    Int
//     tags         String[]
//     collectionId Int

//     collection Collection @relation(fields: [collectionId], references: [id]) // Assuming an implicit collectionId field

//     comments Comment[]
// }

// model CommentLike {
//     commentId Int
//     likeId    Int

//     comment Comment @relation(fields: [commentId], references: [id])
//     like    Like    @relation(fields: [likeId], references: [id])

//     @@unique([commentId, likeId])
// }

// model ItemLike {
//     itemId Int
//     likeId Int

//     item Item @relation(fields: [itemId], references: [id])
//     like Like @relation(fields: [likeId], references: [id])

//     // Primary key constraint (unique combination of itemId and likeId)
//     @@unique([itemId, likeId])
// }
