generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
    directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
    id        String   @id @default(cuid())
    name      String?
    image     String?
    email     String   @unique
    password  String
    isAdmin   Boolean  @default(false)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    emailVerified DateTime?
    accounts      Account[]
    sessions      Session[]
    collections   Collection[]
    Like          ItemLike[]
    Item          Item[]
    Comment       CollectionComments[]
    ItemComments  ItemComments[]
    CommentLike   CommentLike[]
}

model Collection {
    id           String   @id @default(cuid())
    name         String
    topic        String
    description  String
    ownerId      String
    publishedAt  DateTime @default(now())
    cover        String
    customFields Json

    user    User                 @relation(fields: [ownerId], references: [id])
    Comment CollectionComments[]
    Item    Item[]
}

model Item {
    id          String   @id @default(cuid())
    name        String
    description String
    publishedAt DateTime @default(now())
    cover       String
    likeCount   Int
    tags        String[]

    ownerId      String
    collectionId String

    user         User           @relation(fields: [ownerId], references: [id])
    collection   Collection?    @relation(fields: [collectionId], references: [id])
    ItemLike     ItemLike[]
    ItemComments ItemComments[]
}

model CollectionComments {
    id        String   @id @default(cuid())
    userId    String
    date      DateTime @default(now())
    text      String
    likeCount Int

    collectionId String?

    collection  Collection?   @relation(fields: [collectionId], references: [id])
    user        User          @relation(fields: [userId], references: [id])
    CommentLike CommentLike[]
}

model ItemComments {
    id        String   @id @default(cuid())
    userId    String
    date      DateTime @default(now())
    text      String
    likeCount Int

    itemId String?
    item   Item?   @relation(fields: [itemId], references: [id])
    user   User    @relation(fields: [userId], references: [id])
}

// model Like {
//     id             String   @id @default(cuid())
//     likedAt        DateTime @default(now())
//     userId         String
//     commentId      String?
//     itemId         String?
//     collectionId   String?
//     itemCommentsId String?

//     comment      CollectionComments? @relation(fields: [commentId], references: [id])
//     item         Item?               @relation(fields: [itemId], references: [id])
//     user         User                @relation(fields: [userId], references: [id])
//     ItemComments ItemComments?       @relation(fields: [itemCommentsId], references: [id])
// }

model ItemLike {
    id      String   @id @default(cuid())
    likedAt DateTime @default(now())
    userId  String
    itemId  String?

    item Item? @relation(fields: [itemId], references: [id])
    user User  @relation(fields: [userId], references: [id])
}

model CommentLike {
    id        String   @id @default(cuid())
    likedAt   DateTime @default(now())
    userId    String
    commentId String?

    comment CollectionComments? @relation(fields: [commentId], references: [id])
    user    User                @relation(fields: [userId], references: [id])
}

// --------------------

model Account {
    id                 String    @id @default(cuid())
    userId             String
    providerType       String
    providerId         String
    providerAccountId  String
    refreshToken       String?
    accessToken        String?
    accessTokenExpires DateTime?
    createdAt          DateTime  @default(now())
    updatedAt          DateTime  @updatedAt
    user               User      @relation(fields: [userId], references: [id])

    @@unique([providerId, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    userId       String
    expires      DateTime
    sessionToken String   @unique
    accessToken  String   @unique
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
    user         User     @relation(fields: [userId], references: [id])
}

model VerificationRequest {
    id         String   @id @default(cuid())
    identifier String
    token      String   @unique
    expires    DateTime
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    @@unique([identifier, token])
}
